@mixin absolute-full {
  position: absolute;
  left: 0;
  top: 0;
  bottom: 0;
  right: 0;
}

@mixin content-block {
  @include absolute-full;
  content: '';
  width: 100%;
  display: block;
}

@mixin aspect($width, $height) {
  display: block;
  position: relative;
  padding-bottom: percentage($height / $width);
  height: 0;
  overflow: hidden;
}

@mixin aspect-fill {
  @include absolute-full;
  height: 100%;
  width: 100%;
  max-height: 100%;
  max-width: 100%;
}

@mixin background-blur {
  backdrop-filter: blur($background-blur);
}

@mixin screen-reader {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

@mixin container {
  width: 100%;
  height: 100%;
  padding: 0 $padding;
  margin: 0 auto;
}

@mixin truncate-text {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin themed($themes: $themes) {
  @each $theme, $map in $themes {
    .theme--#{$theme} & {
      $theme-map: () !global;
      @each $key, $submap in $map {
        $value: map-get(map-get($themes, $theme), '#{$key}');
        $theme-map: map-merge($theme-map, ($key: $value)) !global;
      }
      @content;
      $theme-map: null !global;
    }
  }
}

@mixin form-verification($validation) {
  @include themed() {
    &:focus,
    &:focus &:hover {
      box-shadow: 0 0 0 1px theme-prop($validation) inset;
    }
    &::selection {
      background: theme-prop($validation);
    }
  }
  & ~ span .c-form-text {
    @include themed() {
      color: theme-prop($validation);
    }
  }
}

@mixin clear-button() {
  @include themed() {
    color: theme-prop(text-lighter);
    background: none;
    box-shadow: none;

    .c-icon {
      fill: theme-prop(text-lighter);
    }

    .c-icon--outline {
      stroke: theme-prop(text-lighter);
    }

    &:hover,
    &.c-button--active {
      color: theme-prop(text-base);
      background: none;
      box-shadow: none;

      .c-icon {
        fill: theme-prop(text-base);
      }

      .c-icon--outline {
        stroke: theme-prop(text-base);
      }
    }

    &.c-button--toggle {
      &.c-button--active {
        color: theme-prop(primary);
        background: none;
        box-shadow: none;

        .c-icon {
          fill: theme-prop(primary);
        }

        .c-icon--outline {
          stroke: theme-prop(primary);
        }

        &:hover {
          color: theme-prop(primary-active);
          background: none;
          box-shadow: none;

          .c-icon {
            fill: theme-prop(primary-active);
          }

          .c-icon--outline {
            stroke: theme-prop(primary-active);
          }
        }
      }
    }

    &:disabled,
    &:disabled &:hover,
    &.c-button--disabled {
      opacity: 50%;
      color: theme-prop(text-lighter);
      background: none;
      box-shadow: none;

      .c-icon {
        fill: theme-prop(text-lighter);
      }

      .c-icon--outline {
        stroke: theme-prop(text-lighter);
      }
    }
  }
}

@mixin stacked-button() {
  flex-direction: column;
  align-items: center;
  justify-content: center;
  box-shadow: none;
  background: none;

  .c-stacked-button__icon {
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: $border-radius;
  }

  @include themed() {
    &:hover {
      box-shadow: none;
      background: none;
    }

    &.c-button--active {
      box-shadow: none;
      background: none;

      .c-stacked-button__icon {
        background: theme-prop(primary);

        .c-icon {
          fill: theme-prop(text-light-on-primary);
        }

        .c-icon--outline {
          stroke: theme-prop(text-light-on-primary);
        }
      }

      &:hover {
        box-shadow: none;
        background: none;

        .c-stacked-button__icon {
          background: theme-prop(primary-active);

          .c-icon {
            fill: theme-prop(text-base-on-primary);
          }

          .c-icon--outline {
            stroke: theme-prop(text-base-on-primary);
          }
        }
      }
    }

    &:disabled,
    &:disabled &:hover,
    &.c-button--disabled {
      box-shadow: none;
      background: none;
      opacity: 50%;
      .c-stacked-button__icon {
        background: none;
      }
    }
  }
}

@mixin default-button() {
  @include themed() {
    color: theme-prop(text-lighter);
    background: theme-prop(button-background);
    box-shadow: 0 0 0 1px theme-prop(button-border) inset;

    .c-icon {
      fill: theme-prop(text-lighter);
    }

    .c-icon--outline {
      stroke: theme-prop(text-lighter);
    }

    &:hover {
      color: theme-prop(text-base);
      box-shadow: 0 0 0 1px theme-prop(button-border-active) inset;

      .c-icon {
        fill: theme-prop(text-base);
      }

      .c-icon--outline {
        stroke: theme-prop(text-base);
      }
    }

    &.c-button--active {
      color: theme-prop(text-light-on-primary);
      background: theme-prop(primary);
      box-shadow: 0 0 0 1px theme-prop(primary) inset;

      .c-icon {
        fill: theme-prop(text-light-on-primary);
      }

      .c-icon--outline {
        stroke: theme-prop(text-light-on-primary);
      }

      &:hover {
        color: theme-prop(text-base-on-primary);
        background: theme-prop(primary-active);
        box-shadow: 0 0 0 1px theme-prop(primary-active) inset;

        .c-icon {
          fill: theme-prop(text-base-on-primary);
        }

        .c-icon--outline {
          stroke: theme-prop(text-base-on-primary);
        }
      }

      &:disabled,
      &:disabled &:hover,
      &.c-button--disabled {
        opacity: 50%;
        color: theme-prop(text-lighter-on-primary);
        background: theme-prop(primary);
        box-shadow: 0 0 0 1px theme-prop(primary) inset;

        .c-icon {
          fill: theme-prop(text-lighter-on-primary);
        }

        .c-icon--outline {
          stroke: theme-prop(text-lighter-on-primary);
        }
      }
    }

    &:disabled,
    &:disabled &:hover,
    &.c-button--disabled {
      opacity: 50%;
      color: theme-prop(text-lighter);
      box-shadow: 0 0 0 1px theme-prop(button-border) inset;

      .c-icon {
        fill: theme-prop(text-lighter);
      }

      .c-icon--outline {
        stroke: theme-prop(text-lighter);
      }
    }
  }
}

@mixin theme-button($theme-color) {
  @include themed() {
    color: theme-prop(text-light-on-#{$theme-color});
    background: theme-prop($theme-color);
    box-shadow: 0 0 0 1px theme-prop($theme-color) inset;

    .c-icon {
      fill: theme-prop(text-light-on-#{$theme-color});
    }

    .c-icon--outline {
      stroke: theme-prop(text-light-on-#{$theme-color});
    }

    &:hover,
    &.c-button--active {
      color: theme-prop(text-base-on-#{$theme-color});
      background: theme-prop(#{$theme-color}-active);
      box-shadow: 0 0 0 1px theme-prop(#{$theme-color}-active) inset;

      .c-icon {
        fill: theme-prop(text-base-on-#{$theme-color});
      }

      .c-icon--outline {
        stroke: theme-prop(text-base-on-#{$theme-color});
      }
    }

    &:disabled,
    &:disabled &:hover,
    &.c-button--disabled {
      opacity: 50%;
      color: theme-prop(text-lighter-on-#{$theme-color});
      background: theme-prop($theme-color);
      box-shadow: 0 0 0 1px theme-prop($theme-color) inset;

      .c-icon {
        fill: theme-prop(text-lighter-on-#{$theme-color});
      }

      .c-icon--outline {
        stroke: theme-prop(text-lighter-on-#{$theme-color});
      }
    }
  }
}

@mixin theme-icon($theme-color, $text-theme-color: false) {
  @if ($text-theme-color) {
    @include themed() {
      fill: theme-prop(text-#{$theme-color});

      &.c-icon--outline {
        fill: none;
        stroke: theme-prop(text-#{$theme-color});
      }
    }
  } @else {
    @include themed() {
      fill: theme-prop($theme-color);

      &.c-icon--outline {
        fill: none;
        stroke: theme-prop($theme-color);
      }
    }
  }
}